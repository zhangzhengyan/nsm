#!/usr/bin/python
# -*- coding: UTF-8 -*-
import os
import sys
import pika
import json
import nsm_agent_modules
import nsm_thread
import nsm_lib
from nsm_agent_modules import *




def s2a_callback(ch, method, properties, message):
    #message 是json对象
    mes = json.loads(message)
    #print mes

    #根据功能类型执行不同的功能函数
    # if mes["type"] == nsm_agent_modules.message_type["NSM_AGENT_EXECUTE"]:
    #     if mes["fun_id"] == nsm_agent_modules.fun_id["NSM_AGENT_EXECUTE_CREAT_DIR"]:
    #         #创建目录 并指定权限和配额等
    #         nsm_agent_modules.create_dir(mes["body"])
    f = eval(fun_table[mes["type"]][mes["fun_id"]])
    f(mes["body"])

    return 0

def main():
    a2s_exchange = 'agent2server'
    a2s_routing_key = 'zktx.server.*.'
    a2s_exchange_type = 'topic'

    s2a_exchange = 'server2agent'
    s2a_routing_key ='zktx.agent.'+ nsm_lib.getLocalIp();
    s2a_exchange_type = 'topic'

    pid = os.fork()
    if pid > 0:
        # exit first parent
        sys.exit(0)

    '''
    定时发送消息到消息队列，消息包括注册、心跳和系统检查等
    '''
    # 建立连接
    a2s_connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    # 得到channel
    a2s_channel = a2s_connection.channel()
    # 创建一个exchange
    a2s_channel.exchange_declare(exchange=a2s_exchange, type=a2s_exchange_type)

    #创建线程开始发送消息
    send_thread = nsm_thread.send_thread(1, "nsm_send_thread", a2s_channel, a2s_exchange, a2s_routing_key)
    send_thread.start()


    '''
    接收来自server的消息
    '''
    #建立连接
    s2a_connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    #得到channel
    s2a_channel = s2a_connection.channel()
    #创建一个exchange
    s2a_channel.exchange_declare(exchange=s2a_exchange, type=s2a_exchange_type)
    #创建一个匿名队列
    s2a_queue = s2a_channel.queue_declare(exclusive=True)
    s2a_queue_name = s2a_queue.method.queue

    #绑定一下
    s2a_channel.queue_bind(exchange=s2a_exchange, queue=s2a_queue_name, routing_key=s2a_routing_key)

    s2a_channel.basic_consume(s2a_callback, queue = s2a_queue_name, no_ack=True)
    s2a_channel.start_consuming()

    '''
    断开链接
    '''
    a2s_connection.close()
    s2a_connection.close()
    return 0

if __name__ == '__main__':
    retval = main()
    sys.exit(retval)
